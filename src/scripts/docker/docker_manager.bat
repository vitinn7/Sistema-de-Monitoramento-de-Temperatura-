@echo off
cls
echo =====================================
echo   üê≥ DOCKER - Sistema Meteorol√≥gico
echo =====================================
echo.

:: Verificar se Docker est√° rodando
docker info >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå ERRO: Docker Desktop n√£o est√° rodando
    echo.
    echo üí° SOLU√á√ÉO:
    echo 1. Abra o Docker Desktop
    echo 2. Aguarde inicializar completamente
    echo 3. Execute este script novamente
    echo.
    pause
    exit /b 1
)

echo ‚úÖ Docker est√° rodando
echo.

:: Mostrar menu de op√ß√µes
echo =====================================
echo   ESCOLHA UMA OP√á√ÉO:
echo =====================================
echo.
echo 1. üöÄ INICIAR APLICA√á√ÉO (Desenvolvimento)
echo 2. üõë PARAR APLICA√á√ÉO
echo 3. üîÑ REINICIAR APLICA√á√ÉO
echo 4. üßπ LIMPEZA COMPLETA (APAGA DADOS!)
echo 5. üìä VER STATUS
echo 6. üìù VER LOGS
echo 7. üîß REBUILD (Ap√≥s mudan√ßas no c√≥digo)
echo 8. üè≠ MODO PRODU√á√ÉO
echo 9. ‚ùå SAIR
echo.

set /p choice="Digite sua escolha (1-9): "

if "%choice%"=="1" goto start_dev
if "%choice%"=="2" goto stop_app
if "%choice%"=="3" goto restart_app
if "%choice%"=="4" goto clean_all
if "%choice%"=="5" goto show_status
if "%choice%"=="6" goto show_logs
if "%choice%"=="7" goto rebuild_app
if "%choice%"=="8" goto start_prod
if "%choice%"=="9" goto exit

echo ‚ùå Op√ß√£o inv√°lida!
pause
goto start

:start_dev
echo.
echo =====================================
echo   üöÄ INICIANDO APLICA√á√ÉO
echo =====================================
echo.
echo 1. Subindo banco de dados e Redis...
docker-compose up -d postgres redis

echo.
echo 2. Aguardando PostgreSQL inicializar (30s)...
timeout /t 30 /nobreak

echo.
echo 3. Verificando banco de dados...
docker-compose logs postgres | findstr "FUNCTIONS CRIADAS COM SUCESSO"
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è  Aguardando mais um pouco...
    timeout /t 10 /nobreak
)

echo.
echo 4. Subindo API e Frontend...
docker-compose up -d api frontend

echo.
echo =====================================
echo   ‚úÖ APLICA√á√ÉO INICIADA!
echo =====================================
echo.
echo üåê URLs da Aplica√ß√£o:
echo   Frontend: http://localhost:3001
echo   Backend:  http://localhost:3000
echo   Health:   http://localhost:3000/health
echo.
echo üìä Verificando status...
docker-compose ps
echo.

set /p open_browser="Deseja abrir o navegador? (s/n): "
if /i "%open_browser%"=="s" (
    start http://localhost:3001
    start http://localhost:3000/health
)

pause
goto start

:stop_app
echo.
echo =====================================
echo   üõë PARANDO APLICA√á√ÉO
echo =====================================
echo.
docker-compose stop
echo.
echo ‚úÖ Aplica√ß√£o parada com sucesso!
echo.
pause
goto start

:restart_app
echo.
echo =====================================
echo   üîÑ REINICIANDO APLICA√á√ÉO
echo =====================================
echo.
echo 1. Parando servi√ßos...
docker-compose stop
echo.
echo 2. Reiniciando servi√ßos...
docker-compose up -d
echo.
echo ‚úÖ Aplica√ß√£o reiniciada!
echo.
pause
goto start

:clean_all
echo.
echo =====================================
echo   üßπ LIMPEZA COMPLETA
echo =====================================
echo.
echo ‚ö†Ô∏è  ATEN√á√ÉO: Isso vai apagar TODOS os dados!
set /p confirm="Tem certeza? Digite 'CONFIRMO': "
if not "%confirm%"=="CONFIRMO" (
    echo ‚ùå Opera√ß√£o cancelada
    pause
    goto start
)

echo.
echo 1. Parando e removendo containers...
docker-compose down -v

echo.
echo 2. Limpando sistema Docker...
docker system prune -f

echo.
echo ‚úÖ Limpeza completa realizada!
echo.
pause
goto start

:show_status
echo.
echo =====================================
echo   üìä STATUS DOS SERVI√áOS
echo =====================================
echo.
docker-compose ps
echo.
echo =====================================
echo   üîç HEALTH CHECKS
echo =====================================
echo.
echo Testando API...
curl -s http://localhost:3000/health 2>nul || echo API n√£o dispon√≠vel
echo.
echo.
pause
goto start

:show_logs
echo.
echo =====================================
echo   üìù LOGS DOS SERVI√áOS
echo =====================================
echo.
echo Escolha o servi√ßo:
echo 1. Todos os servi√ßos
echo 2. PostgreSQL
echo 3. API (Backend)
echo 4. Frontend
echo 5. Redis
echo.

set /p log_choice="Digite sua escolha (1-5): "

if "%log_choice%"=="1" docker-compose logs --tail=50
if "%log_choice%"=="2" docker-compose logs --tail=50 postgres
if "%log_choice%"=="3" docker-compose logs --tail=50 api
if "%log_choice%"=="4" docker-compose logs --tail=50 frontend
if "%log_choice%"=="5" docker-compose logs --tail=50 redis

echo.
pause
goto start

:rebuild_app
echo.
echo =====================================
echo   üîß REBUILD DA APLICA√á√ÉO
echo =====================================
echo.
echo 1. Parando servi√ßos...
docker-compose down

echo.
echo 2. Fazendo rebuild...
docker-compose up -d --build

echo.
echo ‚úÖ Rebuild conclu√≠do!
echo.
pause
goto start

:start_prod
echo.
echo =====================================
echo   üè≠ MODO PRODU√á√ÉO
echo =====================================
echo.
echo 1. Subindo com perfil de produ√ß√£o...
docker-compose --profile production up -d

echo.
echo 2. Subindo monitoramento...
docker-compose --profile monitoring up -d

echo.
echo =====================================
echo   ‚úÖ MODO PRODU√á√ÉO ATIVO!
echo =====================================
echo.
echo üåê URLs:
echo   Aplica√ß√£o: http://localhost:80
echo   Frontend:  http://localhost:3001
echo   Backend:   http://localhost:3000
echo   Prometheus: http://localhost:9090
echo   Grafana:   http://localhost:3002 (admin/admin_temp_2025)
echo.
pause
goto start

:exit
echo.
echo =====================================
echo   üëã AT√â LOGO!
echo =====================================
echo.
echo Para parar completamente:
echo   docker-compose down
echo.
exit /b 0

:start
goto :eof
