# Sistema de Monitoramento de Temperatura - Docker Environment
# Subagente: DevOps/Infrastructure e Security/Performance
# Data: 19/08/2025

version: '3.8'

services:
  # ============================================================================
  # PostgreSQL Database
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: temperatura_postgres
    environment:
      POSTGRES_DB: temperatura_db
      POSTGRES_USER: temperatura_user
      POSTGRES_PASSWORD: temperatura_pass
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/00_docker_setup.sql:/docker-entrypoint-initdb.d/00_docker_setup.sql
      - ./database/01_schema.sql:/docker-entrypoint-initdb.d/01_schema.sql
      - ./database/02_seeds.sql:/docker-entrypoint-initdb.d/02_seeds.sql
      - ./database/03_functions.sql:/docker-entrypoint-initdb.d/03_functions.sql
      - ./docker/postgres.conf:/etc/postgresql/postgresql.conf
    networks:
      - temperatura_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temperatura_user -d temperatura_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Redis Cache (para otimização da API)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: temperatura_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - temperatura_network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Backend API (será implementado pelo Backend Developer)
  # ============================================================================
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: temperatura_api
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: temperatura_db
      DB_USER: temperatura_user
      DB_PASSWORD: temperatura_pass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OPENWEATHER_API_KEY: e3ac0577cd7c582a648ded6903a330f1
      JWT_SECRET: dev_jwt_secret_change_in_production
      API_RATE_LIMIT: 100
      CORS_ORIGIN: http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - temperatura_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Frontend Dashboard (será implementado pelo Frontend Developer)
  # ============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: temperatura_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_ENVIRONMENT: development
      CHOKIDAR_USEPOLLING: true
    ports:
      - "3001:3001"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - temperatura_network
    depends_on:
      - api
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Nginx Reverse Proxy (Produção)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: temperatura_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    networks:
      - temperatura_network
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    profiles:
      - production
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Monitoring com Prometheus (Produção)
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: temperatura_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - temperatura_network
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    security_opt:
      - no-new-privileges:true

  # ============================================================================
  # Grafana Dashboard (Produção)
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: temperatura_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin_temp_2025
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - temperatura_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true

# ============================================================================
# Networks
# ============================================================================
networks:
  temperatura_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
